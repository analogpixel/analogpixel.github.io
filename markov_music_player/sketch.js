var bpm;
var osc;
var markovSong;
var kick;
var snare;
var tic;

var songLocation=0;

// mary had a little lamb
var lambSong = ['E3','D3','C3','D3','E3','E3','E3','D3','D3','D3','E3','G3','G3','E3','D3','C3','D3','E3','E3','E3','E3','D3','D3','E3','D3','C3'];

// Beethoven-Moonlight-Sonata.mid
// http://flashmusicgames.com/midi/mid2txt.php
var moonlight = [61,64,61,64,61,64,61,64,61,64,61,64,61,64,61,64,57,61,64,57,61,64,57,62,66,57,62,66,60,66,61,64,61,63,60,63,61,61,64,61,64,68,61,64,68,68,63,66,63,66,63,66,68,63,66,68,68,61,64,61,64,69,57,61,66,57,61,66,68,59,64,59,64,66,57,59,63,57,71,59,63,64,59,64,59,64,59,64,59,64,59,64,59,64,59,64,67,59,64,67,67,59,65,59,65,59,65,67,59,65,67,67,60,64,59,64,61,64,66,61,64,66,59,62,59,62,67,59,61,64,59,61,66,59,62,59,62,66,58,61,58,61,59,62,66,59,62,66,59,63,66,71,59,63,66,59,72,64,67,59,64,67,59,64,67,70,59,64,67,71,59,63,66,59,63,66,59,63,66,59,71,63,66,59,72,64,67,59,64,67,59,64,67,59,70,64,67,71,59,63,66,59,63,66,59,71,62,65,59,62,65,59,71,61,68,59,61,68,69,57,61,66,57,61,66,67,59,62,59,62,66,57,63,57,63,61,57,57,61,61,57,61,57,61,66,61,66,69,61,73,66,69,73,73,61,68,71,61,68,71,61,68,71,73,61,68,71,73,73,61,66,69,61,66,69,60,72,66,69,73,61,66,69,63,75,66,68,63,66,68,63,66,68,75,63,66,68,76,64,68,73,64,68,73,75,63,66,69,73,61,64,70,72,60,63,68,60,63,69,60,63,66,60,63,57,64,68,73,64,68,76,64,68,73,64,68,61,64,61,57,60,57,63,60,66,63,69,66,72,61,64,61,68,64,73,68,76,73,68,61,67,64,70,67,73,70,76,73,79,76,82,66,72,69,75,72,78,75,81,78,84,81,87,84,78,81,75,78,72,75,69,72,66,69,63,66,60,63,57,60,57,57,57,57,57,57,57,57,57,61,61,57,61,57,61,60,60,61,61,64,61,64,68,61,64,68,68,63,66,63,66,63,66,68,63,66,68,68,61,64,61,64,69,57,61,66,57,61,66,68,59,64,59,64,57,66,59,63,57,71,59,63,64,59,64,59,64,68,59,64,68,71,59,64,68,71,71,59,66,69,59,66,69,59,66,69,59,71,66,69,71,71,59,64,68,59,64,68,60,72,66,68,61,73,64,68,63,75,66,68,63,66,68,64,76,68,73,64,68,73,62,74,66,69,62,66,69,72,60,66,68,60,66,68,73,61,64,68,61,64,68,61,65,68,61,73,65,68,61,74,66,69,61,66,69,57,61,66,69,61,72,66,69,73,61,65,68,61,65,68,61,65,68,61,73,65,68,61,74,66,69,61,66,69,57,61,66,69,61,72,66,69,73,61,65,68,61,65,68,61,73,66,69,61,66,69,71,59,66,69,59,66,69,59,66,69,59,71,64,68,57,69,64,68,57,69,63,66,68,63,66,68,61,64,66,61,63,61,63,68,61,63,69,57,61,63,68,61,64,61,64,68,60,63,60,63,61,61,61,64,61,64,61,64,63,66,63,66,63,66,63,66,64,61,68,64,73,68,76,73,80,76,73,72,75,69,72,66,69,63,66,57,60,61,64,61,68,64,73,68,76,73,80,76,73,72,75,69,72,66,69,63,66,57,60,61,61,64,61,61,61,61,49,37,56,56,56,56,47,35,56,56,56,56,45,33,42,30,44,56,32,56,32,44,56,54,52,44,37,49,56,56,56,56,48,44,56,36,56,56,56,56,49,37,56,42,30,47,35,56,56,35,47,40,52,56,56,56,56,40,52,55,55,55,55,50,55,38,55,55,55,36,48,55,47,55,35,55,46,34,54,35,54,47,54,55,40,43,52,54,42,54,42,54,30,54,47,35,40,52,55,43,52,40,47,35,52,40,55,43,52,40,35,47,44,32,41,29,42,30,35,55,47,55,54,36,48,54,49,37,54,49,54,49,37,54,56,49,37,53,56,54,30,37,42,53,41,49,42,54,39,51,49,37,36,48,44,44,48,36,49,44,37,42,30,43,31,32,44,44,32,48,51,56,48,51,48,51,54,48,51,32,44,52,44,32,52,56,52,56,52,56,52,56,51,32,44,54,44,52,32,56,32,44,32,44,54,51,54,49,54,44,32,48,54,56,56,54,51,54,49,54,32,48,44,54,56,56,54,50,54,49,54,44,32,48,54,56,56,54,45,33,49,52,49,52,30,42,51,51,32,44,51,56,51,54,49,52,44,37,56,56,56,56,36,48,56,44,56,56,56,37,56,49,56,42,30,47,56,35,56,35,47,40,52,56,51,39,52,40,39,51,37,49,44,48,36,37,49,44,42,30,32,44,49,37,42,54,45,42,54,49,37,54,42,45,42,54,37,49,42,30,39,51,40,52,37,49,51,39,36,56,48,56,49,37,54,45,33,54,32,44,56,30,42,32,56,44,56,54,32,44,54,44,52,37,56,56,56,56,44,44,36,44,56,56,56,56,44,44,56,44,37,44,44,32,44,44,56,54,44,52,37,44,44,44,32,44,44,56,54,44,44,52,37,56,56,49,52,56,56,52,44,49,52,56,52,49,44,49,44,40,44,40,37,37,44,49,52,56,37,49,44,52,56];

function makeChain(d) {
  var chain = {};

  (new Set(d)).forEach( (i) => {
    chain[i] = []; 
  });

  for (var i=0; i < d.length-1; i++)  {
    chain[ d[i] ].push( d[i+1]); 
  }
  
  chain[ d[d.length-1] ].push( d[0] );

  return chain;
}

function choose(choices) {
  var index = Math.floor(Math.random() * choices.length);
  return choices[index];
}

function makeSong( start, chain, songLen) {
  var song = [];
  //var last = choose( Object.keys(chain) );
  var last = start;
  for (var i=0; i < songLen; i++) {
    var n = choose(chain[last]);
    song.push( n);
    last = n;
  }

  return song;
}

function preload() {
  tic = loadSound('tic.wav');
  kick = loadSound('kick.wav');
}

function setup() {
  createCanvas(800,400);
  bpm=120;
  osc = new p5.TriOsc();
  osc.start();
  osc.amp(0);
  moonlight = moonlight.map( midi_to_ansi);
}

function draw() {
  renderText();
}

function renderText() {
  if (! markovSong) {
    return;
  }
  fill(255);
  noStroke();
  rect( width/2 - 20, 0, 70, height);
  for (var i=songLocation-10; i < songLocation +10; i++) {
    if (i > 0) {
      var x = map(i,  songLocation-10, songLocation+10, 0, width) ;
      var y = height/2;
      var fs = Math.round( map( abs(x - (width/2)), 0, width/2, 20,5));

  
      if (fs == 20) {
      fill(90);
        stroke(90);
        strokeWeight(2);
      } else {
        fill(120);
        noStroke();
      }
      textSize(fs);
      text( markovSong[ i ] , x,y); 
    }
  }
}

function keyPressed() {

  if (key == 'p') {
    clearAllTimeouts();
    // markovSong = makeSong( lambSong[0], makeChain(lambSong), 1000 );   
    markovSong = makeSong( moonlight[0], makeChain(moonlight), 10000 );   
    songLocation=0;
    playNote();
  }

  if (key == 's') {
    var v = []
    for (var i=songLocation-10; i < songLocation +10; i++) {
      if (i > 0) {
        v.push( markovSong[i] );
      }
    }
    console.log(v);
    var d = document.getElementById('databox');
    d.innerHTML = v;

  }
}

function clearAllTimeouts() {
  var x = setTimeout('alert("x");',100000); //It is very low probability that after 100 seconds x timeout will not be cleared
  for (var i = 0; i <= x; i++)
    clearTimeout(i);
}

function playNote() {
  background(190);
  tic.setVolume(0.6);
  tic.play();

  if (songLocation % 4 == 0) {
    kick.setVolume(1);
    kick.play();
  }

  osc.amp(.6);
  osc.freq(midiToFreq(ansi_to_midi(markovSong[songLocation]))) ;

  // http://bradthemad.org/guitar/tempo_explanation.php
  setTimeout( () => {
    osc.amp(0);
    songLocation++;

    if (songLocation < markovSong.length) {
      playNote();
    }
  }, 30/bpm * 1000 );

}
